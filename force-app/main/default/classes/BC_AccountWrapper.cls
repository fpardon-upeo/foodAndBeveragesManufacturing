//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class BC_AccountWrapper {

    public class Value {
        public String id {get;set;}
        public String number_Z {get;set;} // in json: number
        public String displayName {get;set;}
        public String type {get;set;}
        public String addressLine1 {get;set;}
        public String addressLine2 {get;set;}
        public String city {get;set;}
        public String state {get;set;}
        public String country {get;set;}
        public String postalCode {get;set;}
        public String phoneNumber {get;set;}
        public String email {get;set;}
        public String website {get;set;}
        public Boolean taxLiable {get;set;}
        public String taxAreaId {get;set;}
        public String taxAreaDisplayName {get;set;}
        public String taxRegistrationNumber {get;set;}
        public String currencyId {get;set;}
        public String currencyCode {get;set;}
        public String paymentTermsId {get;set;}
        public String shipmentMethodId {get;set;}
        public String paymentMethodId {get;set;}
        public String blocked {get;set;}
        public String lastModifiedDateTime {get;set;}
        public PaymentTerm paymentTerm {get;set;}
        public ShipmentMethod shipmentMethod {get;set;}
        public CustomerFinancialDetail customerFinancialDetail {get;set;}
        public Object paymentMethod {get;set;}
        public Map<String, Object> getPopulatedFieldsAsMap() {
            Map<String, Object> result = new Map<String, Object>();
            result.put('id', this.id);
            result.put('number_Z', this.number_Z);
            result.put('displayName', this.displayName);
            result.put('addressLine1', this.addressLine1);
            result.put('addressLine2', this.addressLine2);
            result.put('city', this.city);
            result.put('state', this.state);
            result.put('country', this.country);
            result.put('postalCode', this.postalCode);
            result.put('phoneNumber', this.phoneNumber);
            result.put('email', this.email);
            result.put('website', this.website);
            result.put('taxLiable', this.taxLiable);
            result.put('taxAreaDisplayName', this.taxAreaDisplayName);
            result.put('taxRegistrationNumber', this.taxRegistrationNumber);
            result.put('currencyCode', this.currencyCode);
            result.put('paymentTerm', this.paymentTerm);
            result.put('shipmentMethod', this.shipmentMethod);
            result.put('paymentMethod', this.paymentMethod);
            result.put('customerFinancialDetail', this.customerFinancialDetail);
            /* rinse and repeat */
            return result;
        }

        public Value(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'number') {
                            number_Z = parser.getText();
                        } else if (text == 'displayName') {
                            displayName = parser.getText();
                        } else if (text == 'type') {
                            type = parser.getText();
                        } else if (text == 'addressLine1') {
                            addressLine1 = parser.getText();
                        } else if (text == 'addressLine2') {
                            addressLine2 = parser.getText();
                        } else if (text == 'city') {
                            city = parser.getText();
                        } else if (text == 'state') {
                            state = parser.getText();
                        } else if (text == 'country') {
                            country = parser.getText();
                        } else if (text == 'postalCode') {
                            postalCode = parser.getText();
                        } else if (text == 'phoneNumber') {
                            phoneNumber = parser.getText();
                        } else if (text == 'email') {
                            email = parser.getText();
                        } else if (text == 'website') {
                            website = parser.getText();
                        } else if (text == 'taxLiable') {
                            taxLiable = parser.getBooleanValue();
                        } else if (text == 'taxAreaId') {
                            taxAreaId = parser.getText();
                        } else if (text == 'taxAreaDisplayName') {
                            taxAreaDisplayName = parser.getText();
                        } else if (text == 'taxRegistrationNumber') {
                            taxRegistrationNumber = parser.getText();
                        } else if (text == 'currencyId') {
                            currencyId = parser.getText();
                        } else if (text == 'currencyCode') {
                            currencyCode = parser.getText();
                        } else if (text == 'paymentTermsId') {
                            paymentTermsId = parser.getText();
                        } else if (text == 'shipmentMethodId') {
                            shipmentMethodId = parser.getText();
                        } else if (text == 'paymentMethodId') {
                            paymentMethodId = parser.getText();
                        } else if (text == 'blocked') {
                            blocked = parser.getText();
                        } else if (text == 'lastModifiedDateTime') {
                            lastModifiedDateTime = parser.getText();
                        } else if (text == 'paymentTerm') {
                            paymentTerm = new PaymentTerm(parser);
                        } else if (text == 'shipmentMethod') {
                            shipmentMethod = new ShipmentMethod(parser);
                        } else if (text == 'paymentMethod') {
                            paymentMethod = parser.readValueAs(Object.class);
                        } else if (text == 'customerFinancialDetail') {
                            customerFinancialDetail = new CustomerFinancialDetail(parser);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class CustomerFinancialDetail {
        public String id {get;set;}
        public String number_Z {get;set;} // in json: number
        public Integer balance {get;set;}
        public Integer totalSalesExcludingTax {get;set;}
        public Integer overdueAmount {get;set;}
        public Map<String, Object> getPopulatedFieldsAsMap() {
            Map<String, Object> result = new Map<String, Object>();
            result.put('id', this.id);
            result.put('balance', this.balance);
            result.put('totalSalesExcludingTax', this.totalSalesExcludingTax);
            result.put('overdueAmount', this.overdueAmount);
            /* rinse and repeat */
            return result;
        }

        public CustomerFinancialDetail(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'number') {
                            number_Z = parser.getText();
                        } else if (text == 'balance') {
                            balance = parser.getIntegerValue();
                        } else if (text == 'totalSalesExcludingTax') {
                            totalSalesExcludingTax = parser.getIntegerValue();
                        } else if (text == 'overdueAmount') {
                            overdueAmount = parser.getIntegerValue();
                        } else {
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class ShipmentMethod {
        public String id {get;set;}
        public String code {get;set;}
        public String displayName {get;set;}
        public String lastModifiedDateTime {get;set;}
        public Map<String, Object> getPopulatedFieldsAsMap() {
            Map<String, Object> result = new Map<String, Object>();
            result.put('id', this.id);
            result.put('code', this.code);
            result.put('displayName', this.displayName);
            result.put('lastModifiedDateTime', this.lastModifiedDateTime);
            /* rinse and repeat */
            return result;
        }

        public ShipmentMethod(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'code') {
                            code = parser.getText();
                        } else if (text == 'displayName') {
                            displayName = parser.getText();
                        } else if (text == 'lastModifiedDateTime') {
                            lastModifiedDateTime = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'ShipmentMethod consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class PaymentTerm {
        public String id {get;set;}
        public String code {get;set;}
        public String displayName {get;set;}
        public String dueDateCalculation {get;set;}
        public String discountDateCalculation {get;set;}
        public Integer discountPercent {get;set;}
        public Boolean calculateDiscountOnCreditMemos {get;set;}
        public String lastModifiedDateTime {get;set;}
        public Map<String, Object> getPopulatedFieldsAsMap() {
            Map<String, Object> result = new Map<String, Object>();
            result.put('id', this.id);
            result.put('code', this.code);
            result.put('displayName', this.displayName);
            result.put('dueDateCalculation', this.dueDateCalculation);
            result.put('discountDateCalculation', this.discountDateCalculation);
            result.put('discountPercent', this.discountPercent);
            result.put('calculateDiscountOnCreditMemos', this.calculateDiscountOnCreditMemos);
            result.put('lastModifiedDateTime', this.lastModifiedDateTime);
            /* rinse and repeat */
            return result;
        }

        public PaymentTerm(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'code') {
                            code = parser.getText();
                        } else if (text == 'displayName') {
                            displayName = parser.getText();
                        } else if (text == 'dueDateCalculation') {
                            dueDateCalculation = parser.getText();
                        } else if (text == 'discountDateCalculation') {
                            discountDateCalculation = parser.getText();
                        } else if (text == 'discountPercent') {
                            discountPercent = parser.getIntegerValue();
                        } else if (text == 'calculateDiscountOnCreditMemos') {
                            calculateDiscountOnCreditMemos = parser.getBooleanValue();
                        } else if (text == 'lastModifiedDateTime') {
                            lastModifiedDateTime = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'PaymentTerm consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public List<Value> value {get;set;}

    public BC_AccountWrapper(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'value') {
                        value = arrayOfValue(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, '!!!!!!BC_AccountWrapper consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }


    public static BC_AccountWrapper parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new BC_AccountWrapper(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }






    private static List<Value> arrayOfValue(System.JSONParser p) {
        List<Value> res = new List<Value>();
        System.debug('!!!!! p = ' +p.getCurrentToken());
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Value(p));
        }
        return res;
    }





}